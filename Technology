
1. Warehouse.java (Entity)

package org.policy.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "warehouse")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class Warehouse {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String location;
}


---

2. WarehouseDto.java

package org.policy.dto;

import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class WarehouseDto {

    private Long id;
    private String name;
    private String location;
}


---

3. WarehouseMapper.java (MapStruct Interface)

package org.policy.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;
import org.policy.dto.WarehouseDto;
import org.policy.entity.Warehouse;

@Mapper(componentModel = "spring")
public interface WarehouseMapper {

    WarehouseMapper INSTANCE = Mappers.getMapper(WarehouseMapper.class);

    Warehouse toEntity(WarehouseDto dto);

    WarehouseDto toDto(Warehouse entity);
}


---

4. WarehouseRepository.java

package org.policy.repository;

import org.policy.entity.Warehouse;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface WarehouseRepository extends JpaRepository<Warehouse, Long> {

    boolean existsByName(String name);

    Optional<Warehouse> findByLocation(String location);
}


---

5. WarehouseService.java

package org.policy.service;

import org.policy.dto.WarehouseDto;

import java.util.List;

public interface WarehouseService {

    WarehouseDto create(WarehouseDto dto);

    WarehouseDto update(Long id, WarehouseDto dto) throws Exception;

    void delete(Long id);

    WarehouseDto getById(Long id) throws Exception;

    List<WarehouseDto> getAll();
}


---

6. WarehouseServiceImpl.java

package org.policy.service.impl;

import lombok.RequiredArgsConstructor;
import org.policy.dto.WarehouseDto;
import org.policy.entity.Warehouse;
import org.policy.mapper.WarehouseMapper;
import org.policy.repository.WarehouseRepository;
import org.policy.service.WarehouseService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class WarehouseServiceImpl implements WarehouseService {

    private final WarehouseRepository warehouseRepository;
    private final WarehouseMapper warehouseMapper;

    @Override
    public WarehouseDto create(WarehouseDto dto) {
        if (warehouseRepository.existsByName(dto.getName())) {
            throw new IllegalArgumentException("Warehouse already exists with name: " + dto.getName());
        }

        Warehouse warehouse = warehouseMapper.toEntity(dto);
        return warehouseMapper.toDto(warehouseRepository.save(warehouse));
    }

    @Override
    public WarehouseDto update(Long id, WarehouseDto dto) throws Exception {
        Warehouse warehouse = warehouseRepository.findById(id)
                .orElseThrow(() -> new Exception("Warehouse not found with id " + id));

        warehouse.setName(dto.getName());
        warehouse.setLocation(dto.getLocation());

        return warehouseMapper.toDto(warehouseRepository.save(warehouse));
    }

    @Override
    public void delete(Long id) {
        warehouseRepository.deleteById(id);
    }

    @Override
    public WarehouseDto getById(Long id) throws Exception {
        return warehouseMapper.toDto(warehouseRepository.findById(id)
                .orElseThrow(() -> new Exception("Warehouse not found with id " + id)));
    }

    @Override
    public List<WarehouseDto> getAll() {
        return warehouseRepository.findAll().stream()
                .map(warehouseMapper::toDto)
                .collect(Collectors.toList());
    }
}


---

7. Add MapStruct Dependencies to pom.xml

<dependencies>
    <!-- MapStruct -->
    <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct</artifactId>
        <version>1.5.5.Final</version>
    </dependency>
    <dependency>
        <groupId>org.mapstruct</groupId>
        <artifactId>mapstruct-processor</artifactId>
        <version>1.5.5.Final</version>
        <scope>provided</scope>
    </dependency>
</dependencies>

<build>
    <plugins>
        <!-- Annotation Processor for MapStruct -->
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.11.0</version>
            <configuration>
                <annotationProcessorPaths>
                    <path>
                        <groupId>org.mapstruct</groupId>
                        <artifactId>mapstruct-processor</artifactId>
                        <version>1.5.5.Final</version>
                    </path>
                </annotationProcessorPaths>
            </configuration>
        </plugin>
    </plugins>
</build>




WarehouseController.java

package org.policy.controller;

import lombok.RequiredArgsConstructor;
import org.policy.dto.WarehouseDto;
import org.policy.service.WarehouseService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/warehouses")
@RequiredArgsConstructor
public class WarehouseController {

    private final WarehouseService warehouseService;

    @PostMapping
    public ResponseEntity<WarehouseDto> createWarehouse(@RequestBody WarehouseDto dto) {
        WarehouseDto created = warehouseService.create(dto);
        return ResponseEntity.ok(created);
    }

    @PutMapping("/{id}")
    public ResponseEntity<WarehouseDto> updateWarehouse(@PathVariable Long id, @RequestBody WarehouseDto dto) {
        try {
            WarehouseDto updated = warehouseService.update(id, dto);
            return ResponseEntity.ok(updated);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteWarehouse(@PathVariable Long id) {
        warehouseService.delete(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{id}")
    public ResponseEntity<WarehouseDto> getWarehouseById(@PathVariable Long id) {
        try {
            WarehouseDto dto = warehouseService.getById(id);
            return ResponseEntity.ok(dto);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping
    public ResponseEntity<List<WarehouseDto>> getAllWarehouses() {
        return ResponseEntity.ok(warehouseService.getAll());
    }
}

