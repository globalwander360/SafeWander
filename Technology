import { Component, OnInit } from '@angular/core';
import { GoodsService } from 'src/app/services/goods.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { CategoryService } from 'src/app/services/category.service';

@Component({
  selector: 'app-goods-registration',
  templateUrl: './goods-registration.component.html',
  styleUrls: ['./goods-registration.component.css']
})
export class GoodsRegistrationComponent implements OnInit {
  goodsList: any[] = [];
  goodsForm!: FormGroup;
  editMode: boolean = false;
  selectedGoodsId: number | null = null;
  categories: any[] = [];
  
  // Pagination variables
  first: number = 0;
  rows: number = 10;
  totalRecords: number = 0;
  
  // UOM options
  unitOfMeasureOptions: string[] = ['Kilogram', 'Piece', 'Liter', 'Meter', 'Box', 'Unit'];

  constructor(
    private goodsService: GoodsService,
    private fb: FormBuilder,
    private categoryService: CategoryService
  ) {}

  ngOnInit(): void {
    this.initForm();
    this.loadGoods();
    this.loadCategories();
    this.setCurrentUserId();
  }

  initForm() {
    this.goodsForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],
      quantity: [0, [Validators.required, Validators.min(0)]],
      unitOfMeasure: ['', Validators.required],
      location: ['', Validators.required],
      expiryDate: [''],
      acquisitionDate: ['', Validators.required],
      minimumStockLevel: [0, Validators.min(0)],
      price: [0, Validators.min(0)],
      supplier: ['', [Validators.minLength(3), Validators.maxLength(100)]],
      status: ['PENDING', Validators.required],
      userId: ['', Validators.required],
      categoryId: ['', Validators.required]
    });

    // Subscribe to changes in categoryId to conditionally set validators for expiryDate
    this.goodsForm.get('categoryId')?.valueChanges.subscribe(categoryId => {
      const category = this.categories.find(c => c.id === Number(categoryId));
      
      if (category && category.isPerishable) {
        this.goodsForm.get('expiryDate')?.setValidators([Validators.required]);
      } else {
        this.goodsForm.get('expiryDate')?.clearValidators();
      }
      
      this.goodsForm.get('expiryDate')?.updateValueAndValidity();
    });

    // Add validator to ensure expiryDate is in the future
    this.goodsForm.get('expiryDate')?.valueChanges.subscribe(date => {
      if (date) {
        const selectedDate = new Date(date);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        if (selectedDate <= today) {
          this.goodsForm.get('expiryDate')?.setErrors({ 'pastDate': true });
        }
      }
    });

    // Add validator to ensure acquisitionDate is not in the future
    this.goodsForm.get('acquisitionDate')?.valueChanges.subscribe(date => {
      if (date) {
        const selectedDate = new Date(date);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        if (selectedDate > today) {
          this.goodsForm.get('acquisitionDate')?.setErrors({ 'futureDate': true });
        }
      }
    });
  }

  loadGoods() {
    this.goodsService.getAllGoods().subscribe((data) => {
      this.goodsList = data;
      this.totalRecords = data.length;
    });
  }

  loadCategories() {
    this.categoryService.getAll().subscribe((data) => {
      this.categories = data;
    });
  }

  setCurrentUserId() {
    const currentUser = JSON.parse(localStorage.getItem('user') || 'null');
    if (currentUser && currentUser.id) {
      this.goodsForm.patchValue({ userId: currentUser.id });
    }
  }

  saveGoods() {
    if (this.goodsForm.invalid) {
      this.markFormGroupTouched(this.goodsForm);
      alert('Invalid details. Please check the form.');
      return;
    }

    this.goodsForm.patchValue({ status: 'PENDING' });
    this.setCurrentUserId();

    if (this.editMode && this.selectedGoodsId !== null) {
      this.goodsService.updateGoods(this.selectedGoodsId, this.goodsForm.value).subscribe(() => {
        this.loadGoods();
        this.resetForm();
      });
    } else {
      this.goodsService.createGoods(this.goodsForm.value).subscribe(() => {
        this.loadGoods();
        this.resetForm();
      });
    }
  }

  // Helper method to mark all form controls as touched
  markFormGroupTouched(formGroup: FormGroup) {
    Object.values(formGroup.controls).forEach(control => {
      control.markAsTouched();
      
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      }
    });
  }

  editGoods(goods: any) {
    this.goodsForm.patchValue(goods);
    this.editMode = true;
    this.selectedGoodsId = goods.id;
  }

  deleteGoods(id: number) {
    // Check if goods status is not APPROVED
    const goods = this.goodsList.find(g => g.id === id);
    if (goods && goods.status === 'APPROVED') {
      alert('Cannot delete approved goods.');
      return;
    }
    
    if (confirm('Are you sure you want to delete this goods?')) {
      this.goodsService.deleteGoods(id).subscribe(() => {
        this.loadGoods();
      });
    }
  }

  resetForm() {
    this.goodsForm.reset();
    this.goodsForm.patchValue({ status: 'PENDING' });
    this.editMode = false;
    this.selectedGoodsId = null;
    this.setCurrentUserId();
  }

  getCategoryName(categoryId: number): string {
    const category = this.categories.find(c => c.id === categoryId);
    return category ? category.name : '';
  }

  // Pagination methods
  onPageChange(event: any) {
    this.first = event.first;
    this.rows = event.rows;
  }

  isFormFieldValid(field: string): boolean {
    const control = this.goodsForm.get(field);
    return !!(control && control.invalid && (control.dirty || control.touched));
  }

  getFormErrorMessage(field: string): string {
    const control = this.goodsForm.get(field);
    
    if (control?.errors?.['required']) {
      return 'This field is required.';
    }
    
    if (control?.errors?.['minlength']) {
      return `Minimum length is ${control.errors?.['minlength'].requiredLength} characters.`;
    }
    
    if (control?.errors?.['maxlength']) {
      return `Maximum length is ${control.errors?.['maxlength'].requiredLength} characters.`;
    }
    
    if (control?.errors?.['min']) {
      return `Value must be at least ${control.errors?.['min'].min}.`;
    }
    
    if (control?.errors?.['pastDate']) {
      return 'Date must be in the future.';
    }
    
    if (control?.errors?.['futureDate']) {
      return 'Date cannot be in the future.';
    }
    
    return 'Invalid input.';
  }

  isCategoryPerishable(): boolean {
    const categoryId = this.goodsForm.get('categoryId')?.value;
    if (!categoryId) return false;
    
    const category = this.categories.find(c => c.id === Number(categoryId));
    return category ? category.isPerishable : false;
  }
}



<div class="goods-container">
  <h2>Goods Registration & Management</h2>
  
  <!-- Form Section -->
  <section class="goods-form-section">
    <h3>Goods Registration Form</h3>
    <form [formGroup]="goodsForm" (ngSubmit)="saveGoods()" class="goods-form">
      <!-- Name -->
      <div class="form-field">
        <label>Goods Name <span class="required">*</span></label>
        <input type="text" formControlName="name" placeholder="Goods Name" />
        <small class="error-message" *ngIf="isFormFieldValid('name')">
          {{ getFormErrorMessage('name') }}
        </small>
      </div>

      <!-- Category -->
      <div class="form-field">
        <label>Category <span class="required">*</span></label>
        <select formControlName="categoryId" placeholder="Select Category">
          <option value="" disabled selected>Select your option</option>
          <option *ngFor="let cat of categories" [value]="cat.id">{{ cat.name }}</option>
        </select>
        <small class="error-message" *ngIf="isFormFieldValid('categoryId')">
          {{ getFormErrorMessage('categoryId') }}
        </small>
      </div>

      <!-- Quantity -->
      <div class="form-field">
        <label>Quantity <span class="required">*</span></label>
        <input type="number" formControlName="quantity" placeholder="Quantity" />
        <small class="error-message" *ngIf="isFormFieldValid('quantity')">
          {{ getFormErrorMessage('quantity') }}
        </small>
      </div>

      <!-- UOM -->
      <div class="form-field">
        <label>Unit of Measure <span class="required">*</span></label>
        <select formControlName="unitOfMeasure">
          <option value="" disabled selected>Select unit</option>
          <option *ngFor="let uom of unitOfMeasureOptions" [value]="uom">{{ uom }}</option>
        </select>
        <small class="error-message" *ngIf="isFormFieldValid('unitOfMeasure')">
          {{ getFormErrorMessage('unitOfMeasure') }}
        </small>
      </div>

      <!-- Location -->
      <div class="form-field">
        <label>Location <span class="required">*</span></label>
        <input type="text" formControlName="location" placeholder="Location" />
        <small class="error-message" *ngIf="isFormFieldValid('location')">
          {{ getFormErrorMessage('location') }}
        </small>
      </div>

      <!-- Expiry Date -->
      <div class="form-field">
        <label>
          Expiry Date
          <span class="required" *ngIf="isCategoryPerishable()">*</span>
        </label>
        <input type="date" formControlName="expiryDate" />
        <small class="error-message" *ngIf="isFormFieldValid('expiryDate')">
          {{ getFormErrorMessage('expiryDate') }}
        </small>
      </div>

      <!-- Acquisition Date -->
      <div class="form-field">
        <label>Acquisition Date <span class="required">*</span></label>
        <input type="date" formControlName="acquisitionDate" />
        <small class="error-message" *ngIf="isFormFieldValid('acquisitionDate')">
          {{ getFormErrorMessage('acquisitionDate') }}
        </small>
      </div>

      <!-- Min Stock Level -->
      <div class="form-field">
        <label>Minimum Stock Level</label>
        <input type="number" formControlName="minimumStockLevel" placeholder="Minimum Stock" />
        <small class="error-message" *ngIf="isFormFieldValid('minimumStockLevel')">
          {{ getFormErrorMessage('minimumStockLevel') }}
        </small>
      </div>

      <!-- Price -->
      <div class="form-field">
        <label>Price</label>
        <input type="number" formControlName="price" placeholder="Price" />
        <small class="error-message" *ngIf="isFormFieldValid('price')">
          {{ getFormErrorMessage('price') }}
        </small>
      </div>

      <!-- Supplier -->
      <div class="form-field">
        <label>Supplier</label>
        <input type="text" formControlName="supplier" placeholder="Supplier" />
        <small class="error-message" *ngIf="isFormFieldValid('supplier')">
          {{ getFormErrorMessage('supplier') }}
        </small>
      </div>

      <div class="form-buttons">
        <button type="submit" pButton [label]="editMode ? 'Update' : 'Create'"></button>
        <button type="button" pButton label="Reset" class="p-button-secondary" (click)="resetForm()"></button>
      </div>
    </form>
  </section>

  <!-- Table Section -->
  <section class="goods-table-section">
    <h3>Registered Goods List</h3>
    <i>Note: You Cannot Delete Approved Goods</i>
    
    <p-table 
      [value]="goodsList" 
      [paginator]="true" 
      [rows]="rows" 
      [showCurrentPageReport]="true" 
      [(first)]="first"
      [totalRecords]="totalRecords"
      [rowsPerPageOptions]="[5, 10, 25]"
      currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
      (onPage)="onPageChange($event)">
      
      <ng-template pTemplate="header">
        <tr>
          <th>Name</th>
          <th>Category</th>
          <th>Quantity</th>
          <th>Location</th>
          <th>Price</th>
          <th>Supplier</th>
          <th>Status</th>
          <th>Actions</th>
        </tr>
      </ng-template>
      
      <ng-template pTemplate="body" let-goods>
        <tr>
          <td>{{ goods.name }}</td>
          <td>{{ getCategoryName(goods.categoryId) }}</td>
          <td>{{ goods.quantity }}</td>
          <td>{{ goods.location }}</td>
          <td>{{ goods.price }}</td>
          <td>{{ goods.supplier }}</td>
          <td>{{ goods.status }}</td>
          <td>
            <button pButton icon="pi pi-pencil" class="p-button-rounded p-button-success p-button-sm" 
                    (click)="editGoods(goods)"></button>
            <button pButton icon="pi pi-trash" class="p-button-rounded p-button-danger p-button-sm ml-2" 
                    (click)="deleteGoods(goods.id)"
                    [disabled]="goods.status === 'APPROVED'"></button>
          </td>
        </tr>
      </ng-template>
      
      <ng-template pTemplate="paginatorleft">
        <p>Total Records: {{totalRecords}}</p>
      </ng-template>
    </p-table>
  </section>
</div>



import { Component, OnInit } from '@angular/core';
import { CategoryService } from '../services/category.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-category',
  templateUrl: './category.component.html',
  styleUrls: ['./category.component.css']
})
export class CategoryComponent implements OnInit {
  categories: any[] = [];
  categoryForm!: FormGroup;
  editMode: boolean = false;
  editId: number | null = null;
  
  // Pagination variables
  first: number = 0;
  rows: number = 10;
  totalRecords: number = 0;

  constructor(
    private categoryService: CategoryService,
    private fb: FormBuilder
  ) {}

  ngOnInit(): void {
    this.initForm();
    this.loadCategories();
  }

  initForm() {
    this.categoryForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],
      description: ['', Validators.maxLength(500)],
      storageRequirements: ['', Validators.maxLength(500)],
      isPerishable: [false],
      shelfLife: [null]
    });

    // Add conditional validator for shelfLife
    this.categoryForm.get('isPerishable')?.valueChanges.subscribe(isPerishable => {
      const shelfLifeControl = this.categoryForm.get('shelfLife');
      
      if (isPerishable) {
        shelfLifeControl?.setValidators([Validators.required, Validators.min(1)]);
      } else {
        shelfLifeControl?.clearValidators();
      }
      
      shelfLifeControl?.updateValueAndValidity();
    });
  }

  loadCategories() {
    this.categoryService.getAll().subscribe(data => {
      this.categories = data;
      this.totalRecords = data.length;
    });
  }

  saveCategory() {
    if (this.categoryForm.invalid) {
      this.markFormGroupTouched(this.categoryForm);
      alert('Invalid details. Please check the form.');
      return;
    }

    if (this.editMode && this.editId !== null) {
      this.updateCategory();
    } else {
      this.addCategory();
    }
  }

  addCategory() {
    // Check if category name is unique
    if (this.categories.some(c => c.name.toLowerCase() === this.categoryForm.value.name.toLowerCase())) {
      alert('Category name must be unique.');
      return;
    }

    this.categoryService.create(this.categoryForm.value).subscribe(() => {
      this.resetForm();
      this.loadCategories();
    });
  }

  updateCategory() {
    if (this.editId !== null) {
      // Check if category name is unique (excluding the current category)
      const duplicateName = this.categories.some(c => 
        c.name.toLowerCase() === this.categoryForm.value.name.toLowerCase() && c.id !== this.editId
      );
      
      if (duplicateName) {
        alert('Category name must be unique.');
        return;
      }

      this.categoryService.update(this.editId, this.categoryForm.value).subscribe(() => {
        this.resetForm();
        this.loadCategories();
      });
    }
  }

  editCategory(category: any) {
    this.editMode = true;
    this.editId = category.id;
    this.categoryForm.patchValue({
      name: category.name,
      description: category.description,
      storageRequirements: category.storageRequirements,
      isPerishable: category.isPerishable,
      shelfLife: category.shelfLife
    });
  }

  deleteCategory(id: number) {
    // Check if category is used by any approved goods
    // This would typically be implemented in the backend
    // For now, we'll just show a confirmation dialog
    if (confirm('Are you sure you want to delete this category?')) {
      this.categoryService.delete(id).subscribe(() => {
        this.loadCategories();
      });
    }
  }

  resetForm() {
    this.categoryForm.reset();
    this.categoryForm.patchValue({ isPerishable: false });
    this.editMode = false;
    this.editId = null;
  }

  // Pagination method
  onPageChange(event: any) {
    this.first = event.first;
    this.rows = event.rows;
  }

  // Helper method to mark all form controls as touched
  markFormGroupTouched(formGroup: FormGroup) {
    Object.values(formGroup.controls).forEach(control => {
      control.markAsTouched();
      
      if (control instanceof FormGroup) {
        this.markFormGroupTouched(control);
      }
    });
  }

  isFormFieldValid(field: string): boolean {
    const control = this.categoryForm.get(field);
    return !!(control && control.invalid && (control.dirty || control.touched));
  }

  getFormErrorMessage(field: string): string {
    const control = this.categoryForm.get(field);
    
    if (control?.errors?.['required']) {
      return 'This field is required.';
    }
    
    if (control?.errors?.['minlength']) {
      return `Minimum length is ${control.errors?.['minlength'].requiredLength} characters.`;
    }
    
    if (control?.errors?.['maxlength']) {
      return `Maximum length is ${control.errors?.['maxlength'].requiredLength} characters.`;
    }
    
    if (control?.errors?.['min']) {
      return `Value must be at least ${control.errors?.['min'].min}.`;
    }
    
    return 'Invalid input.';
  }
}



<div class="category-container">
  <h2>Category Management</h2>

  <!-- Category Form -->
  <section class="category-form-section">
    <h3>{{ editMode ? 'Edit' : 'Add' }} Category</h3>
    <form [formGroup]="categoryForm" (ngSubmit)="saveCategory()" class="category-form">
      <!-- Name -->
      <div class="form-field">
        <label>Category Name <span class="required">*</span></label>
        <input type="text" formControlName="name" placeholder="Category Name">
        <small class="error-message" *ngIf="isFormFieldValid('name')">
          {{ getFormErrorMessage('name') }}
        </small>
      </div>

      <!-- Description -->
      <div class="form-field">
        <label>Description</label>
        <textarea formControlName="description" placeholder="Description" rows="3"></textarea>
        <small class="error-message" *ngIf="isFormFieldValid('description')">
          {{ getFormErrorMessage('description') }}
        </small>
      </div>

      <!-- Storage Requirements -->
      <div class="form-field">
        <label>Storage Requirements</label>
        <textarea formControlName="storageRequirements" placeholder="Storage Requirements" rows="3"></textarea>
        <small class="error-message" *ngIf="isFormFieldValid('storageRequirements')">
          {{ getFormErrorMessage('storageRequirements') }}
        </small>
      </div>

      <!-- Is Perishable -->
      <div class="form-field checkbox-field">
        <label>
          <input type="checkbox" formControlName="isPerishable">
          Is Perishable
        </label>
      </div>

      <!-- Shelf Life -->
      <div class="form-field" *ngIf="categoryForm.get('isPerishable')?.value">
        <label>Shelf Life (days) <span class="required">*</span></label>
        <input type="number" formControlName="shelfLife" placeholder="Shelf Life (days)">
        <small class="error-message" *ngIf="isFormFieldValid('shelfLife')">
          {{ getFormErrorMessage('shelfLife') }}
        </small>
      </div>

      <div class="form-buttons">
        <button type="submit" pButton [label]="editMode ? 'Update Category' : 'Add Category'"></button>
        <button type="button" pButton label="Cancel" class="p-button-secondary" (click)="resetForm()"></button>
      </div>
    </form>
  </section>

  <!-- Categories Table -->
  <section class="category-table-section">
    <h3>Categories List</h3>
    <i>Note: You cannot delete categories with approved goods</i>
    
    <p-table 
      [value]="categories" 
      [paginator]="true" 
      [rows]="rows" 
      [showCurrentPageReport]="true" 
      [(first)]="first"
      [totalRecords]="totalRecords"
      [rowsPerPageOptions]="[5, 10, 25]"
      currentPageReportTemplate="Showing {first} to {last} of {totalRecords} entries"
      (onPage)="onPageChange($event)">
      
      <ng-template pTemplate="header">
        <tr>
          <th>Name</th>
          <th>Description</th>
          <th>Storage</th>
          <th>Perishable</th>
          <th>Shelf Life</th>
          <th>Actions</th>
        </tr>
      </ng-template>
      
      <ng-template pTemplate="body" let-category>
        <tr>
          <td>{{ category.name }}</td>
          <td>{{ category.description }}</td>
          <td>{{ category.storageRequirements }}</td>
          <td>{{ category.isPerishable ? 'Yes' : 'No' }}</td>
          <td>{{ category.isPerishable ? (category.shelfLife + ' days') : 'N/A' }}</td>
          <td>
            <button pButton icon="pi pi-pencil" class="p-button-rounded p-button-success p-button-sm" 
                    (click)="editCategory(category)"></button>
            <button pButton icon="pi pi-trash" class="p-button-rounded p-button-danger p-button-sm ml-2" 
                    (click)="deleteCategory(category.id)"></button>
          </td>
        </tr>
      </ng-template>
      
      <ng-template pTemplate="paginatorleft">
        <p>Total Records: {{totalRecords}}</p>
      </ng-template>
    </p-table>
  </section>
</div>









