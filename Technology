import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { MessageService } from 'primeng/api';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css'],
  providers: [MessageService]
})
export class RegisterComponent {
  registerForm: FormGroup;
  errorMessage: string = "";
  loading: boolean = false;
  roles = [
    { label: 'User', value: 'USER' },
    { label: 'Admin', value: 'ADMIN' },
    { label: 'Logistic Coordinator', value: 'LOGISTIC_COORDINATOR' }
  ];

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private messageService: MessageService
  ) {
    this.registerForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]],
      role: ['', Validators.required]
    });
  }

  // Getter methods for form controls
  get email() { return this.registerForm.get('email'); }
  get password() { return this.registerForm.get('password'); }
  get role() { return this.registerForm.get('role'); }

  register() {
    if (this.registerForm.invalid) {
      this.errorMessage = 'Please fill all required fields correctly';
      this.messageService.add({
        severity: 'error',
        summary: 'Validation Error',
        detail: this.errorMessage,
        life: 3000
      });
      return;
    }

    this.loading = true;
    this.errorMessage = '';

    this.authService.register(this.registerForm.value).subscribe(
      response => {
        this.loading = false;
        this.messageService.add({
          severity: 'success',
          summary: 'Registration Successful',
          detail: 'You have been registered successfully!',
          life: 3000
        });
        
        // Navigate after a short delay to ensure the user sees the message
        setTimeout(() => {
          this.router.navigate(['/login']);
        }, 1500);
      },
      error => {
        this.loading = false;
        
        if (error.status === 409) {
          this.errorMessage = 'Email already registered';
        } else {
          this.errorMessage = 'Registration failed. Please try again.';
        }
        
        this.messageService.add({
          severity: 'error',
          summary: 'Registration Failed',
          detail: this.errorMessage,
          life: 3000
        });
      }
    );
  }

  navigateTo(path: string): void {
    this.router.navigate([path]);
  }
}




<div class="register-container">
  <div class="register-card">
    <h2>Register</h2>
    <div *ngIf="errorMessage" class="error-alert">
      {{ errorMessage }}
    </div>
    <form [formGroup]="registerForm" (ngSubmit)="register()">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="text" id="email" formControlName="email" placeholder="Email">
        <div *ngIf="email?.invalid && (email?.dirty || email?.touched)" class="error-text">
          <span *ngIf="email?.errors?.['required']">Email is required</span>
          <span *ngIf="email?.errors?.['email']">Please enter a valid email</span>
        </div>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" formControlName="password" placeholder="Password">
        <div *ngIf="password?.invalid && (password?.dirty || password?.touched)" class="error-text">
          <span *ngIf="password?.errors?.['required']">Password is required</span>
          <span *ngIf="password?.errors?.['minlength']">Password must be at least 6 characters</span>
        </div>
      </div>
      <div class="form-group">
        <label for="role">Role</label>
        <select id="role" formControlName="role" class="role-select">
          <option value="">Select Role</option>
          <option *ngFor="let option of roles" [value]="option.value">
            {{ option.label }}
          </option>
        </select>
        <div *ngIf="role?.invalid && (role?.dirty || role?.touched)" class="error-text">
          <span *ngIf="role?.errors?.['required']">Role is required</span>
        </div>
      </div>
      <button type="submit" [disabled]="loading" class="register-button primary">
        {{ loading ? 'Registering...' : 'Register' }}
      </button>
      <button type="button" class="register-button secondary" (click)="navigateTo('/login')">
        Back to Login
      </button>
    </form>
  </div>
</div>

<p-toast position="top-right"></p-toast>




import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';
import { MessageService } from 'primeng/api';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
  providers: [MessageService]
})
export class LoginComponent {
  loginForm: FormGroup;
  errorMessage: string = "";
  loading: boolean = false;

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private router: Router,
    private messageService: MessageService
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  // Getter methods for form controls
  get email() { return this.loginForm.get('email'); }
  get password() { return this.loginForm.get('password'); }

  login() {
    if (this.loginForm.invalid) {
      this.errorMessage = 'Please fill all required fields correctly';
      this.messageService.add({
        severity: 'error',
        summary: 'Validation Error',
        detail: this.errorMessage,
        life: 3000
      });
      return;
    }

    this.loading = true;
    this.errorMessage = "";

    this.authService.login(this.loginForm.value).subscribe(
      response => {
        localStorage.setItem('role', response.role);
        localStorage.setItem('user', JSON.stringify(response));

        const role = response.role;
        this.loading = false;
        
        this.messageService.add({
          severity: 'success',
          summary: 'Login Successful',
          detail: 'You have been logged in successfully!',
          life: 2000
        });
        
        // Navigate after a short delay to ensure the user sees the message
        setTimeout(() => {
          if (role === 'USER') {
            this.router.navigate(['/user-dashboard']);
          } else if (role === 'ADMIN') {
            this.router.navigate(['/admin-dashboard']);
          } else if (role === 'LOGISTIC_COORDINATOR') {
            this.router.navigate(['/coordinator-dashboard']);
          } else {
            this.errorMessage = 'Unauthorized role';
            this.messageService.add({
              severity: 'error',
              summary: 'Authorization Error',
              detail: this.errorMessage,
              life: 3000
            });
          }
        }, 1000);
      },
      error => {
        this.loading = false;

        if (error.status === 404) {
          this.errorMessage = 'Email not found';
        } else if (error.status === 401) {
          this.errorMessage = 'Invalid credentials';
        } else {
          this.errorMessage = 'Login failed. Please try again.';
        }
        
        this.messageService.add({
          severity: 'error',
          summary: 'Login Failed',
          detail: this.errorMessage,
          life: 3000
        });
      }
    );
  }

  navigateTo(path: string): void {
    this.router.navigate([path]);
  }
}



<div class="login-container">
  <div class="login-card">
    <h2>Login</h2>
    <div *ngIf="errorMessage" class="error-alert">
      {{ errorMessage }}
    </div>
    <form [formGroup]="loginForm" (ngSubmit)="login()">
      <div class="form-group">
        <label for="email">Email</label>
        <input type="text" id="email" formControlName="email" placeholder="Email">
        <div *ngIf="email?.invalid && (email?.dirty || email?.touched)" class="error-text">
          <span *ngIf="email?.errors?.['required']">Email is required</span>
          <span *ngIf="email?.errors?.['email']">Please enter a valid email</span>
        </div>
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" formControlName="password" placeholder="Password">
        <div *ngIf="password?.invalid && (password?.dirty || password?.touched)" class="error-text">
          <span *ngIf="password?.errors?.['required']">Password is required</span>
        </div>
      </div>
      <button type="submit" [disabled]="loading" class="login-button">
        {{ loading ? 'Logging in...' : 'Login' }}
      </button>
      <button type="button" class="register-button" (click)="navigateTo('/register')">
        Register
      </button>
    </form>
  </div>
</div>

<p-toast position="top-right"></p-toast>



